// <auto-generated />
using CabinRenter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CabinRenter.Data.Migrations
{
    [DbContext(typeof(CabinContext))]
    [Migration("20180410112128_booking-week-rentalobj-relation--person-booking-rel")]
    partial class bookingweekrentalobjrelationpersonbookingrel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CabinRenter.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int?>("PersonId");

                    b.Property<int>("RentalObjectId");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("RentalObjectId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CabinRenter.Domain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CabinRenter.Domain.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("CabinRenter.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("CabinRenter.Domain.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<string>("Path");

                    b.Property<int>("RentalObjectId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RentalObjectId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CabinRenter.Domain.RentalObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ObjectTypeId");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("RentalObjects");
                });

            modelBuilder.Entity("CabinRenter.Domain.RentalObjectWeek", b =>
                {
                    b.Property<int>("RentalObjectId");

                    b.Property<int>("WeekId");

                    b.Property<int?>("BookingId");

                    b.Property<double>("Price");

                    b.HasKey("RentalObjectId", "WeekId");

                    b.HasIndex("BookingId");

                    b.HasIndex("WeekId");

                    b.ToTable("RentalObjectWeek");
                });

            modelBuilder.Entity("CabinRenter.Domain.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NoWeek");

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("CabinRenter.Domain.Address", b =>
                {
                    b.HasOne("CabinRenter.Domain.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("CabinRenter.Domain.Address", "PersonId");

                    b.HasOne("CabinRenter.Domain.RentalObject", "RentalObject")
                        .WithOne("Address")
                        .HasForeignKey("CabinRenter.Domain.Address", "RentalObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CabinRenter.Domain.Booking", b =>
                {
                    b.HasOne("CabinRenter.Domain.Person", "Person")
                        .WithMany("Bookings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CabinRenter.Domain.Photo", b =>
                {
                    b.HasOne("CabinRenter.Domain.RentalObject", "RentalObject")
                        .WithMany("Photos")
                        .HasForeignKey("RentalObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CabinRenter.Domain.RentalObject", b =>
                {
                    b.HasOne("CabinRenter.Domain.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CabinRenter.Domain.Person", "Owner")
                        .WithMany("RentalObjects")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CabinRenter.Domain.RentalObjectWeek", b =>
                {
                    b.HasOne("CabinRenter.Domain.Booking", "Booking")
                        .WithMany("BookedWeeks")
                        .HasForeignKey("BookingId");

                    b.HasOne("CabinRenter.Domain.RentalObject", "RentalObject")
                        .WithMany("AvailableWeeks")
                        .HasForeignKey("RentalObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CabinRenter.Domain.Week", "Week")
                        .WithMany("CabinWeeks")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
